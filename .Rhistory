devtools::install_github("MichaelJMahometa/SDSRegressionR", force = TRUE)
install.packages("processx")
devtools::install_github("MichaelJMahometa/SDSRegressionR", force = TRUE)
remove.packages("processx")
knitr::opts_chunk$set(echo = TRUE)
par(mfrow=c(2,3))
plot(rating~category, data = highrating)
par(mfrow=c(2,3))
plot(rating~category, data = highrating)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("devtools") #if needed
#devtools::install_github("MichaelJMahometa/SDSRegressionR", force = TRUE)
library(dplyr)
library(lubridate)
library(car)
library(SDSRegressionR)
library(splines)
library(boot)
source("cleandata.R")
googleData <- read.csv("googleplaystore.csv", stringsAsFactors = FALSE)
googleData <- cleandata(googleData)
head(googleData)
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 0.5)
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
fullmodel <- lm(rating~ ., data = googleData)
#summary(fullmodel)
Anova(fullmodel, type = "III")
residualPlot(fullmodel, main = "Residual vs. Fitted")
set.seed(201)
results <- setNames(c(0, 0), c("MSE", "c.v MSE"))
twothirds = sample(1:nrow(googleData), 2*(nrow(googleData)/3))
train <- googleData[twothirds,]
test <- googleData[-twothirds,]
lmdata <- lm(rating ~., data = train)
lm.pred = predict(lmdata, test, type = "response")
results[1] <- mean((test$rating- lm.pred)^2) #MSE
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d=1
for(d in degree){
glm.fit=glm(rating~ ., data=googleData)
cv.error10[d]=cv.glm(googleData,glm.fit,K=10)$delta[1]
}
results[2] <- mean(cv.error10)
results
hist(googleData$rating, xlab = "Rating", main = "Frequency Distribution of Rating")
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE, cex.main = 1.5)
summary(lm(reviews~ installs, data= googleData))
Anova(lm(reviews~ installs, data= googleData), type = "III")
plot(reviews~ installs, data = googleData)
onlypaid <- googleData[googleData$price != 0,]
dim(onlypaid)
onlypaid <- onlypaid[onlypaid$price > 0 & onlypaid$price < 100,] #remove applications in $100-$400 range, $0
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating")
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"), col= c("black", "blue", "red", "green"), lty= 1)
anova(lmonlypaid, quadonlypaid, cubiconlypaid, highdegreeonlypaid)
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression"), col= c("darkgreen", "blue", "red"), lty= 1)
summary(lm(price~ type, data= googleData))
Anova(lm(price~ type, data= googleData), type = "III")
noprice <- lm(rating~.-price, data = googleData)
#summary(noprice)
anova(fullmodel, noprice)
noreviews <- lm(rating~. -reviews, data = googleData)
#summary(noreviews)
anova(fullmodel, noreviews)
noinstalls <-lm(rating~. -installs, data = googleData)
#summary(noinstalls)
anova(fullmodel, noinstalls)
updatedmodel <- lm(rating~. - price - reviews, data = googleData)
summary(updatedmodel)$r.squared
Anova(updatedmodel, type = "III")
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating - androidver, data = googleData)
summary(updatedmodel2)$r.squared
Anova(updatedmodel2)
anova(fullmodel, updatedmodel, updatedmodel2)
newData <- select(googleData, c("category", "rating", "installs", "type", "lastupdated", "androidver"))
#calculate the test error
#use 2/3 data for training data, 1/3 for test
set.seed(201)
twothirds2 = sample(1:nrow(newData), 2*(nrow(newData)/3))
train2 <- newData[twothirds,]
test2 <- newData[-twothirds,]
lmgoogle2 <- lm(rating~ ., data = train2)
lm.pred2 = predict(lmgoogle2, test2, type = "response")
results[1] <- mean((test2$rating - lm.pred2)^2)
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d =1
for(d in degree){
glm.fit=glm(rating~., data=newData)
cv.error10[d]=cv.glm(newData,glm.fit,K=10)$delta[1]
}
results[2] <- mean(cv.error10)
results
par(mfrow=c(2,2))
hist(newData$rating, breaks = 50, main = "Frequency Distribution of Rating", xlab = "Rating") #oh crap, it's left skewed
hist((newData$rating)^2, breaks = 50, main = "Frequency Distribution of Rating^2", xlab = "Rating^2") #squaring it doesn't make too much difference
hist(log(newData$rating), breaks = 50, main = "Frequency Distribution of log(Rating)", xlab = "log(Rating)") #log doesn't change it either
boxplot(newData$rating, main = "Distribution of Rating")
summary(newData$rating) #25% of the data is 1-4, 75% of the data is 4.0 - 5.0
lowrating <- filter(newData, rating < 4)
highrating <- filter(newData, rating >=4)
par(mfrow=c(2,1))
hist(lowrating$rating, xlab= "Rating", main = "Low Rating")
hist(highrating$rating, xlab= "Rating", main = "High Rating")
lmltf <- lm(rating~., data = lowrating)
summary(lmltf)
Anova(lmltf, type = "III")
lmmtf <- lm(rating~., data = lowrating)
summary(lmmtf)
Anova(lmmtf, type = "III")
summary(lmltf)$r.squared
knitr::opts_chunk$set(echo = TRUE)
summary(lm(reviews~ installs, data= googleData))$r.squared
Anova(lm(reviews~ installs, data= googleData), type = "III")
#install.packages("devtools") #if needed
#devtools::install_github("MichaelJMahometa/SDSRegressionR", force = TRUE)
library(dplyr)
library(lubridate)
library(car)
library(SDSRegressionR)
library(splines)
library(boot)
source("cleandata.R")
summary(lm(reviews~ installs, data= googleData))$r.squared
Anova(lm(reviews~ installs, data= googleData), type = "III")
plot(reviews~ installs, data = googleData)
summary(lm(reviews~ installs, data= googleData))$r.squared
Anova(lm(reviews~ installs, data= googleData), type = "III")
plot(reviews~ installs, data = googleData, main = "Installs vs. Reviews")
lmmtf <- lm(rating~., data = lowrating)
summary(lmmtf)$r.squared
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating, data = googleData)
summary(updatedmodel2)
Anova(updatedmodel2)
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating, data = googleData)
summary(updatedmodel2)
Anova(updatedmodel2)
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating, data = googleData)
summary(updatedmodel2)
Anova(updatedmodel2)
plot(rating~category, data = morethanfour)
onlypaid <- googleData[googleData$price != 0,]
plot(rating ~ category, data = newData)
View(newData)
a <- unique(newData$category)
b <- vector(length = 33, mode = numeric)
b <- vector(length = 33, mode = "numeric")
for (i in a){
mean(newData[newData$category == i, 2])
}
for (i in a){
b <- mean(newData[newData$category == i, 2])
}
for (i in a){
b[c] <- mean(newData[newData$category == i, 2])
c = c + 1
}
b <- vector(length = 33, mode = "numeric")
c = 0
for (i in a){
b[c] <- mean(newData[newData$category == i, 2])
c = c + 1
}
b <- vector(length = length(a), mode = "numeric")
c = 0
for (i in a){
b[c] <- mean(newData[newData$category == i, 2])
c = c + 1
}
names(b) <- a
b
summary(b)
sort(b)
sort(-b)
sort(desc(b))
names(b) <- a
sort(desc(b))
sort(b)
order(b)
sort(b, decreasing = TRUE)
head(sort(b, decreasing = TRUE))
d <- unique(newData$installs)
e <- vector(length = length(a), mode = "numeric")
e <- vector(length = length(d), mode = "numeric")
f = 0 #set counter
for (i in a){
e[f] <- mean(newData[newData$installs == i, 2]) #calculate mean of each unique value of installs and store it
f = f + 1 #increase counter
}
for (i in d){
e[f] <- mean(newData[newData$installs == i, 2]) #calculate mean of each unique value of installs and store it
f = f + 1 #increase counter
}
d <- unique(newData$installs) #get unique values of installs
e <- vector(length = length(d), mode = "numeric") #create a vector of same length as the unique values
f = 0 #set counter
for (i in d){
e[f] <- mean(newData[newData$installs == i, 2]) #calculate mean of each unique value of installs and store it
f = f + 1 #increase counter
}
names(e) <- d #assign names to each value
head(sort(e, decreasing = TRUE)) #get the top values
tail(sort(e, decreasing = TRUE))
typemean <- vector(length =2, mode= "numeric")
typemean[1] <- mean(newData[newData$type = "Free", 2])
typemean[1] <- mean(newData[newData$type == "Free", 2])
typemean[2] <- mean(newData[newData$type == "Paid", 2])
head(sort(b, decreasing = TRUE)) #get the top values
plot(rating ~ lastupdated, data = newData)
summary(lm(rating~lastupdated, data= newData))
a <- read.csv("https://s3.amazonaws.com/coursera-uploads/peer-review/3d58116cbd381c9790bfad89004483e6/tidy_data.txt")
View(a)
a <- read.table("https://s3.amazonaws.com/coursera-uploads/peer-review/3d58116cbd381c9790bfad89004483e6/tidy_data.txt")
View(a)
library(swirl)
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout= c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
setwd("C:/Users/Chris Han/ExData_Plotting1")
house <- read.table("household_power_consumption.txt")
head(house)
house <- read.table("household_power_consumption.txt", header = TRUE, skip = !grep("1/2/2007"|"2/2/2007"))
house <- read.table("household_power_consumption.txt", header = TRUE, skip = !grep(...,"1/2/2007"|"2/2/2007"))
house <- read.table("household_power_consumption.txt", header = TRUE)
View(house)
house <- read.table("household_power_consumption.txt", header = TRUE, sep= ";")
View(house)
?grep
only2007 <- house[grep("1/2/2007"|"2/2/2007", house$Date),]
View(house)
house <- read.table("household_power_consumption.txt", header = TRUE, sep= ";", stringsAsFactors = FALSE)
only2007 <- house[grep("1/2/2007"|"2/2/2007", house$Date),]
only2007 <- house[grep("1/2/2007|2/2/2007", house$Date),]
View(only2007)
only2007 <- house[grep("1/2/2007|2/2/2007", house$Date, fixed = TRUE),]
only2007 <- house[grep("1/2/2007|2/2/2007", house$Date),]
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
library(dplyr)
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
patterns <- c("1/2/2007", "2/2/2007")
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
View(result)
patterns <- c("\\b1/2/2007\\b", "\\b2/2/2007\\b")
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
View(result)
library(lubridate)
result$Date <- dmy(results$Date)
result$Date <- dmy(result$Date)
View(result)
hist(result$Global_active_power, col= "red", main= "Global Active Power")
result$Global_active_power <- as.numeric(result$Global_active_power)
hist(result$Global_active_power, col= "red", main= "Global Active Power")
hist(result$Global_active_power, col= "red", main= "Global Active Power", xlab = "Global Active Power (kilowatts")
hist(result$Global_active_power, col= "red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)")
plot(result$Date, result$Global_active_power)
library(swirl)
swirl()
head(airquality)
range(airqualit$Ozone, na.rm =TRUE)
range(airquality$Ozone, na.rm =TRUE)
strptime(result$Time)
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
result <- result %>%
mutate(Date = dmy_hms(Date, Time))
result$Time <- strptime(result$Time)
result <- result %>%
mutate(Date = Date + Time)
result <- result %>%
mutate(datetime = paste(Date, Time))
result <- result %>%
mutate(datetime = paste(Date, Time)) %>%
strptime(datetime, format = "%D/%M/%Y %H:%M:%S")
strptime(mutate(datetime = paste(Date, Time), format = "%D/%M/%Y %H:%M:%S")
result <- result %>%
strptime(mutate(datetime = paste(Date, Time), format = "%D/%M/%Y %H:%M:%S"))
result <- result %>%
mutate(datetime = paste(Date, Time))
bye()
result$datetime <- strptime(result$datetime, format = "%D/%M/%Y %H:%M:%S")
result <- result %>%
mutate(datetime = paste(Date, Time))
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
result <- result %>%
mutate(datetime = paste(Date, Time))
result <- result %>%
mutate(datetime = paste(Date, Time, sep= ;))
result <- result %>%
mutate(datetime = paste(Date, Time, sep= ";"))
result$datetime <- strptime(result$datetime, format = "%D/%M/%Y;%H:%M:%S")
View(result)
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
View(result)
result$datetime <- dmy_hms(paste(result$Date, result$Time))
result$datetime <- strptime(result$datetime, format = "%Y-%M-%D %H:%M:%S")
result <- filter(house, grepl(paste(patterns, collapse="|"), Date))
result$datetime <- dmy_hms(paste(result$Date, result$Time))
View(result)
plot(result$datetime, result$Global_active_power)
?plot
plot(result$datetime, result$Global_active_power, type = "l")
plot(result$datetime, result$Global_active_power, type = "l", xlab= "")
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power (kilowatts")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "")
line(result$datetime, result$Sub_metering_2, type = "l", col = "red")
line(result$datetime, result$Sub_metering_2, col = "red")
line(result$datetime, result$Sub_metering_2)
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
par(mfrow= c(2,2))
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power (kilowatts")
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
par(mfrow= c(2,2))
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
plot(result$datetime, as.numeric(result$Voltage), type = "l", xlab ="datetime", ylab= "Voltage")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
plot(result$datetime, result$Global_reactive_power, xlab= "datetime")
plot(result$datetime, result$Global_reactive_power, xlab= "datetime", type = "l")
par(mfrow= c(2,2))
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
plot(result$datetime, as.numeric(result$Voltage), type = "l", xlab ="datetime", ylab= "Voltage")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
plot(result$datetime, result$Global_reactive_power, xlab= "datetime", type = "l")
dev.cur()
result$Global_active_power <- as.numeric(result$Global_active_power)
hist(result$Global_active_power, col= "red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)")
par(mfrow=1)
result$Global_active_power <- as.numeric(result$Global_active_power)
hist(result$Global_active_power, col= "red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)")
par(mfrow=c(1,1))
hist(result$Global_active_power, col= "red", main= "Global Active Power", xlab = "Global Active Power (kilowatts)")
dev.copy(png, "plot1.png")
dev.off()
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
dev.copy(png, "plot2.png")
dev.off()
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
dev.copy(png, "plot3.png")
dev.off()
par(mfrow= c(2,2))
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
plot(result$datetime, as.numeric(result$Voltage), type = "l", xlab ="datetime", ylab= "Voltage")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
plot(result$datetime, result$Global_reactive_power, xlab= "datetime", type = "l")
dev.copy(png, "plot4.png")
dev.off()
?legend
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1, cex= 0.5)
par(mfrow=c(1,1))
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1, cex= 0.5)
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1, cex= 0.7)
dev.copy(png, "plot3.png")
dev.off()
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
?dev.copy
?legend
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
dev.copy(png, "plot3.png")
dev.off()
dev.set(4)
dev.set(2)
dev.set(3)
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
png("plot3.png")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
dev.off()
dev.set(3)
png("plot4.png")
par(mfrow= c(2,2))
plot(result$datetime, result$Global_active_power, type = "l", xlab= "", ylab= "Global Active Power")
plot(result$datetime, as.numeric(result$Voltage), type = "l", xlab ="datetime", ylab= "Voltage")
plot(result$datetime, result$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub meeting")
lines(result$datetime, result$Sub_metering_2, type = "l", col= "red")
lines(result$datetime, result$Sub_metering_3, type = "l", col= "blue")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black", "red", "blue"), lty= 1)
plot(result$datetime, result$Global_reactive_power, xlab= "datetime", type = "l")
dev.off()
